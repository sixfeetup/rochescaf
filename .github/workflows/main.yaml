name: Main Workflow

on: [ push, pull_request ]

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}

jobs:
  check-lint-and-formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Check lint and formatting
        run: make check-lint-and-formatting

  check-lint-and-test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
      - name: Frontend Lint & Typecheck & Test
        run: make check-lint-and-test-frontend

  backend-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: rochescaf
          POSTGRES_USER: rochescaf
          POSTGRES_PASSWORD: TESTPASSWORD
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432



    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Run backend tests
        run: CI=true make backend-test
        env:
          DATABASE_URL: postgresql://rochescaf:TESTPASSWORD@localhost:5432/rochescaf
          POSTGRES_HOST: postgres
          POSTGRES_PORT: 5432


  build-backend-image:
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [check-lint-and-formatting, backend-test]
    outputs:
      short-sha: ${{ steps.vars.outputs.short-sha }}
      branch-name: ${{ steps.vars.outputs.branch-name }}
      target-env: ${{ steps.vars.outputs.target-env }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials from OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/rochescaf-github-oidc-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set environment variables
        id: vars
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          BRANCH_NAME=$(echo ${{ github.ref }} | sed s,refs/heads/,, | sed s,/,-,g)
          TARGET_ENV=$(if [ "$BRANCH_NAME" = "main" ]; then echo "prod"; else echo "sandbox"; fi)
          echo "short-sha=$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "target-env=$TARGET_ENV" >> $GITHUB_OUTPUT
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "TARGET_ENV=$TARGET_ENV" >> $GITHUB_ENV

      - name: Set Backend ECR Repo
        run: |
          echo "ECR_REPO_BACKEND=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/rochescaf-$TARGET_ENV-backend" >> $GITHUB_ENV

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ env.ECR_REPO_BACKEND }}:${{ env.SHORT_SHA }},${{ env.ECR_REPO_BACKEND }}:${{ env.BRANCH_NAME }}


  build-frontend-image:
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [check-lint-and-test-frontend]

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials from OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/rochescaf-github-oidc-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set environment variables
        run: |
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed s,refs/heads/,, | sed s,/,-,g)" >> $GITHUB_ENV
          export TARGET_ENV=$(if [ "$BRANCH_NAME" = "main" ]; then echo "prod"; else echo "sandbox"; fi)
          echo "TARGET_ENV=$TARGET_ENV" >> $GITHUB_ENV

      - name: Set frontend environment variables
        run: |
          echo "NEXT_PUBLIC_API_URL=https://api.sandbox.roche.scaf.sixfeetup.com/" >> ./frontend/.env
          echo "NEXT_PUBLIC_GRAPHQL_ENDPOINT=https://api.sandbox.roche.scaf.sixfeetup.com/graphql/" >> ./frontend/.env
          echo "NEXT_GRAPHQL_ENDPOINT=https://api.sandbox.roche.scaf.sixfeetup.com/graphql/" >> ./frontend/.env

      - name: Set Frontend ECR Repo
        run: |
          echo "ECR_REPO_FRONTEND=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/rochescaf-$TARGET_ENV-frontend" >> $GITHUB_ENV

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{env.ECR_REPO_FRONTEND}}:${{ env.SHORT_SHA }},${{ env.ECR_REPO_FRONTEND }}:${{ env.BRANCH_NAME }}


  update-manifests:
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    needs: [build-backend-image, build-frontend-image]


    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{secrets.GITHUB_TOKEN}}
          persist-credentials: true

      - name: Get environment variables from backend job
        run: |
          echo "SHORT_SHA=${{ needs.build-backend-image.outputs.short-sha }}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${{ needs.build-backend-image.outputs.branch-name }}" >> $GITHUB_ENV
          echo "TARGET_ENV=${{ needs.build-backend-image.outputs.target-env }}" >> $GITHUB_ENV

      - name: Set ECR Repos
        run: |
          echo "ECR_REPO_BACKEND=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/rochescaf-$TARGET_ENV-backend" >> $GITHUB_ENV
          
          echo "ECR_REPO_FRONTEND=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/rochescaf-$TARGET_ENV-frontend" >> $GITHUB_ENV
          

      - name: Tag Images
        run: |
          cd k8s/$TARGET_ENV
          kustomize edit set image backend=$ECR_REPO_BACKEND:$SHORT_SHA
          
          kustomize edit set image frontend=$ECR_REPO_FRONTEND:$SHORT_SHA
          

      - name: Commit & Push to GitHub
        run: |
          git config user.email "$GITHUB_EMAIL"
          git config user.name "GitHub User"
          git add k8s/$TARGET_ENV/kustomization.yaml
          git commit -m "Update $TARGET_ENV image to $SHORT_SHA [skip ci]"
          git push
